class t extends HTMLElement { get src() { return this.getAttribute("src") } set src(t) { this.reflect("src", t) } get manualRender() { return this.hasAttribute("manual-render") } set manualRender(t) { this.reflect("manual-render", t) } reflect(t, e) { !1 === e ? this.removeAttribute(t) : this.setAttribute(t, !0 === e ? "" : e) } static get observedAttributes() { return ["src"] } attributeChangedCallback(t, e, s) { "src" === t && this.connected && !this.manualRender && s !== e && this.render() } constructor(t) { super(), this.version = "2.2.0", this.config = { markedUrl: "https://cdn.jsdelivr.net/gh/markedjs/marked@2/marked.min.js", prismUrl: [["https://cdn.jsdelivr.net/gh/PrismJS/prism@1/prism.min.js", "data-manual"], "https://cdn.jsdelivr.net/gh/PrismJS/prism@1/plugins/autoloader/prism-autoloader.min.js"], cssUrls: ["https://cdn.jsdelivr.net/gh/sindresorhus/github-markdown-css@4/github-markdown.min.css", "https://cdn.jsdelivr.net/gh/PrismJS/prism@1/themes/prism.min.css"], hostCss: ":host{display:block;position:relative;contain:content;}:host([hidden]){display:none;}", ...t, ...window.ZeroMdConfig }, this.root = this.hasAttribute("no-shadow") ? this : this.attachShadow({ mode: "open" }), this.constructor.ready || (this.constructor.ready = Promise.all([!!window.marked || this.loadScript(this.config.markedUrl), !!window.Prism || this.loadScript(this.config.prismUrl)])), this.clicked = this.clicked.bind(this), this.manualRender || this.render().then((() => setTimeout((() => this.goto(location.hash)), 250))), this._stampedBody = null, this._stampedStyles = null, this.observeChanges() } connectedCallback() { this.connected = !0, this.fire("zero-md-connected", {}, { bubbles: !1, composed: !1 }), this.waitForReady().then((() => { this.fire("zero-md-ready") })), this.shadowRoot && this.shadowRoot.addEventListener("click", this.clicked) } disconnectedCallback() { this.connected = !1, this.shadowRoot && this.shadowRoot.removeEventListener("click", this.clicked) } waitForReady() { const t = this.connected || new Promise((t => { this.addEventListener("zero-md-connected", (function e() { this.removeEventListener("zero-md-connected", e), t() })) })); return Promise.all([this.constructor.ready, t]) } fire(t, e = {}, s = { bubbles: !0, composed: !0 }) { e.msg && console.warn(e.msg), this.dispatchEvent(new CustomEvent(t, { detail: { node: this, ...e }, ...s })) } tick() { return new Promise((t => requestAnimationFrame(t))) } arrify(t) { return t ? Array.isArray(t) ? t : [t] : [] } onload(t) { return new Promise(((e, s) => { t.onload = e, t.onerror = t => s(t.path ? t.path[0] : t.composedPath()[0]) })) } loadScript(t) { return t = this.arrify(t), Promise.all(t.map((t => { const [e, ...s] = this.arrify(t), r = document.createElement("script"); return r.src = e, r.async = !1, s.forEach((t => r.setAttribute(t, ""))), this.onload(document.head.appendChild(r)) }))) } goto(t) { if (t) { const e = this.root.getElementById(t.substring(1)); e && e.scrollIntoView() } } clicked(t) { if (t.metaKey || t.ctrlKey || t.altKey || t.shiftKey || t.defaultPrevented) return; const e = t.target.closest("a"); e && e.hash && e.host === location.host && e.pathname === location.pathname && this.goto(e.hash) } clearDom() { this.root.querySelectorAll("[class^=markdown]").forEach((t => t.remove())) } makeFrag(t) { const e = document.createElement("template"); return e.innerHTML = t, e.content } dedent(t) { const e = (t = t.replace(/^\n/, "")).match(/^\s+/); return e ? t.replace(new RegExp(`^${e[0]}`, "gm"), "") : t } getBaseUrl(t) { const e = document.createElement("a"); return e.href = t, e.href.substring(0, e.href.lastIndexOf("/") + 1) } highlight(t) { t.querySelectorAll('pre>code:not([class*="language-"])').forEach((t => { const e = t.innerText.match(/^\s*</) ? "markup" : t.innerText.match(/^\s*(\$|#)/) ? "bash" : "js"; t.classList.add(`language-${e}`) })), window.Prism.highlightAllUnder(t) } observeChanges() { const t = new MutationObserver((() => { this.manualRender || this.refreshStyles() })), e = new MutationObserver((() => { this.manualRender || this.refreshContent() })), s = s => [...s].forEach((s => { const r = { childList: !0, attributes: !0, characterData: !0, subtree: !0 }; s.matches('script[type="text/markdown"]') ? e.observe(s, r) : "TEMPLATE" === s.tagName && t.observe(s.content, r) })); new MutationObserver((t => { const e = [], r = []; if (t.forEach((t => { t.removedNodes.forEach((t => { e.includes(t) ? e.splice(e.indexOf(t), 1) : r.push(t) })), t.addedNodes.forEach((t => { r.includes(t) ? r.splice(r.indexOf(t), 1) : e.push(t) })) })), !e.length && !r.length) return; let i = !1, a = !1;[...e, ...r].forEach((t => { i && a || (t.matches('script[type="text/markdown"]') && !this.src ? i = !0 : "TEMPLATE" === t.tagName && (a = !0)) })), s(e), i && !this.manualRender && this.refreshContent(), a && !this.manualRender && this.refreshStyles() })).observe(this, { childList: !0 }), s(this.children) } buildStyles() { const t = t => { const e = this.querySelector(t); return e ? e.innerHTML || " " : "" }, e = this.arrify(this.config.cssUrls), s = `<div class="markdown-styles"><style>${this.config.hostCss}</style>${t('template[data-merge="prepend"]')}${t("template:not([data-merge])") || e.reduce(((t, e) => `${t}<link rel="stylesheet" href="${e}">`), "")}${t('template[data-merge="append"]')}</div>`; return this.makeFrag(s) } async buildMd(t = {}) { const e = `<div class="markdown-body${t.classes ? this.arrify(t.classes).reduce(((t, e) => `${t} ${e}`), " ") : ""}">${await (async () => { if (!this.src) return ""; const e = await fetch(this.src); if (e.ok) { const s = await e.text(); return window.marked(s, { baseUrl: this.getBaseUrl(this.src), ...t }) } return this.fire("zero-md-error", { msg: `[zero-md] HTTP error ${e.status} while fetching src`, status: e.status, src: this.src }), "" })() || (() => { const e = this.querySelector('script[type="text/markdown"]'); if (!e) return ""; const s = e.hasAttribute("data-dedent") ? this.dedent(e.text) : e.text; return window.marked(s, t) })()}</div>`, s = this.makeFrag(e); return this.highlight(s.firstElementChild), s } async stampDom(t) { const e = [...t.querySelectorAll('link[rel="stylesheet"]')], s = this.root.appendChild(t.firstElementChild); return await Promise.all(e.map((t => this.onload(t)))).catch((t => { this.fire("zero-md-error", { msg: "[zero-md] An external stylesheet failed to load", status: void 0, src: t.href }) })), s } async render(t = {}) { await this.waitForReady(), this.clearDom(); const e = this.buildStyles(), s = this.buildMd(t); this._stampedStyles = await this.stampDom(e), await this.tick(), this._stampedBody = await this.stampDom(await s), this.fire("zero-md-rendered") } async refreshContent(t = {}) { const e = await this.buildMd(t); if (this._stampedBody) { const t = e.firstElementChild; this._stampedBody.replaceWith(t), this._stampedBody = t } else this._stampedBody = await this.stampDom(e); this.fire("zero-md-rendered", { partial: !0, part: "body" }) } async refreshStyles() { const t = this.buildStyles(); if (this._stampedStyles) { const e = t.firstElementChild; this._stampedStyles.replaceWith(e), this._stampedStyles = e } else this._stampedStyles = await this.stampDom(t); await this.tick(), this.fire("zero-md-rendered", { partial: !0, part: "styles" }) } } customElements.define("zero-md", t); export { t as ZeroMd };
//# sourceMappingURL=zero-md.min.js.map
